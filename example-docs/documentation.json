{
  "metadata": {
    "generatedAt": "2025-03-23T08:21:53.151Z",
    "componentCount": 5,
    "fileExtensions": [".js"],
    "componentNames": [
      "sum",
      "toTitleCase",
      "getRectangleArea",
      "fetchData",
      "logMessage"
    ],
    "tagsUsed": ["param", "returns"]
  },
  "components": [
    {
      "componentName": "sum",
      "props": [
        {
          "name": "a",
          "type": "number",
          "description": "The first number to add."
        },
        {
          "name": "b",
          "type": "number",
          "description": "The second number to add."
        }
      ],
      "jsDoc": {
        "description": "Adds two numbers together.",
        "tags": [
          {
            "title": "param",
            "name": "a",
            "type": "number",
            "description": "The first number to add.",
            "optional": false
          },
          {
            "title": "param",
            "name": "b",
            "type": "number",
            "description": "The second number to add.",
            "optional": false
          },
          {
            "title": "returns",
            "name": "",
            "type": "number",
            "description": "The sum of both numbers.",
            "optional": false
          }
        ]
      },
      "code": "(a, b) => a + b",
      "fileExtension": ".js",
      "description": "Adds two numbers together.",
      "extraSections": [
        {
          "title": "Returns",
          "content": [
            "- Type: `number`\n- Description: The sum of both numbers.\n\n"
          ]
        }
      ]
    },
    {
      "componentName": "toTitleCase",
      "props": [
        {
          "name": "text",
          "type": "string",
          "description": "The input string."
        }
      ],
      "jsDoc": {
        "description": "Capitalizes the first letter of every word in a string.",
        "tags": [
          {
            "title": "param",
            "name": "text",
            "type": "string",
            "description": "The input string.",
            "optional": false
          },
          {
            "title": "returns",
            "name": "",
            "type": "string",
            "description": "The title-cased string.",
            "optional": false
          }
        ]
      },
      "code": "function toTitleCase(text) {\n  return text.\n  toLowerCase().\n  split(' ').\n  map((word) => word.charAt(0).toUpperCase() + word.slice(1)).\n  join(' ');\n}",
      "fileExtension": ".js",
      "description": "Capitalizes the first letter of every word in a string.",
      "extraSections": [
        {
          "title": "Returns",
          "content": [
            "- Type: `string`\n- Description: The title-cased string.\n\n"
          ]
        }
      ]
    },
    {
      "componentName": "getRectangleArea",
      "props": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the rectangle."
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the rectangle."
        }
      ],
      "jsDoc": {
        "description": "Calculates the area of a rectangle.",
        "tags": [
          {
            "title": "param",
            "name": "width",
            "type": "number",
            "description": "The width of the rectangle.",
            "optional": false
          },
          {
            "title": "param",
            "name": "height",
            "type": "number",
            "description": "The height of the rectangle.",
            "optional": false
          },
          {
            "title": "returns",
            "name": "",
            "type": "number",
            "description": "The area of the rectangle.",
            "optional": false
          }
        ]
      },
      "code": "function getRectangleArea(width, height) {\n  return width * height;\n}",
      "fileExtension": ".js",
      "description": "Calculates the area of a rectangle.",
      "extraSections": [
        {
          "title": "Returns",
          "content": [
            "- Type: `number`\n- Description: The area of the rectangle.\n\n"
          ]
        }
      ]
    },
    {
      "componentName": "fetchData",
      "props": [
        {
          "name": "url",
          "type": "string",
          "description": "The API endpoint to fetch data from."
        }
      ],
      "jsDoc": {
        "description": "Fetches data from a given API URL.",
        "tags": [
          {
            "title": "param",
            "name": "url",
            "type": "string",
            "description": "The API endpoint to fetch data from.",
            "optional": false
          },
          {
            "title": "returns",
            "name": "",
            "type": "Promise.<Object>",
            "description": "A promise that resolves to the JSON response.",
            "optional": false
          }
        ]
      },
      "code": "async function fetchData(url) {\n  const response = await fetch(url);\n  return response.json();\n}",
      "fileExtension": ".js",
      "description": "Fetches data from a given API URL.",
      "extraSections": [
        {
          "title": "Returns",
          "content": [
            "- Type: `Promise.<Object>`\n- Description: A promise that resolves to the JSON response.\n\n"
          ]
        }
      ]
    },
    {
      "componentName": "logMessage",
      "props": [
        {
          "name": "message",
          "type": "string",
          "description": "The message to log."
        },
        {
          "name": "debug",
          "type": "boolean",
          "description": "Whether to log in debug mode."
        }
      ],
      "jsDoc": {
        "description": "Logs a message with a timestamp.",
        "tags": [
          {
            "title": "param",
            "name": "message",
            "type": "string",
            "description": "The message to log.",
            "optional": false
          },
          {
            "title": "param",
            "name": "debug",
            "type": "boolean",
            "description": "Whether to log in debug mode.",
            "optional": false
          },
          {
            "title": "returns",
            "name": "",
            "type": "void",
            "description": "",
            "optional": false
          }
        ]
      },
      "code": "function logMessage(message, debug = false) {\n  const time = new Date().toISOString();\n  console.log(`[${time}] ${debug ? '[DEBUG]' : ''} ${message}`);\n}",
      "fileExtension": ".js",
      "description": "Logs a message with a timestamp.",
      "extraSections": [
        {
          "title": "Returns",
          "content": ["- Type: `void`\n- Description: No description\n\n"]
        }
      ]
    }
  ]
}
